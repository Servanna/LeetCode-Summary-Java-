/*
 Author:     King, wangjingui@outlook.com
 Date:       Dec 20, 2014
 Problem:    3Sum Closest
 Difficulty: Medium
 Source:     https://oj.leetcode.com/problems/3sum-closest/
 Notes:
 Given an array S of n integers, find three integers in S such that the sum is closest to 
 a given number, target. Return the sum of the three integers. 
 You may assume that each input would have exactly one solution.
 For example, given array S = {-1 2 1 -4}, and target = 1.
 The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
 Solution: Similar to 3Sum, taking O(n^2) time complexity.
 */

public class Solution {
    public int threeSumClosest(int[] num, int target) {
        if(num.length < 3){return 0;}
        Arrays.sort(num);
        int closest = num[0] + num[1] + num[2];
        for(int i = 0; i < num.length - 2; i++){
            int l = i+1;
            int r = num.length - 1;
            while(l < r){
                int sum = num[i] + num[l] + num[r];
                if(sum == target){
                    return target;
                }else if(sum > target){
                    r--;
                }else{
                    l++;
                }
                if(Math.abs(sum - target) < Math.abs(target - closest)){
                    closest = sum;
                }
            }
        }
        return closest;
    }
}
