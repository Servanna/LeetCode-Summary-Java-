/*
 Problem:    Trapping Rain Water
 Difficulty: hard
 Source:     https://oj.leetcode.com/problems/trapping-rain-water/
 Notes:
 Given n non-negative integers representing an elevation map where 
 the width of each bar is 1, compute how much water it is able to trap after raining.

For example, 
 Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.
 The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. 
 In this case, 6 units of rain water (blue section) are being trapped. 

 Solution: dp
 */
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int trap(int[] A) {
        int len = A.length;
        if(len <= 1){return 0;}
        int[] dp = new int[len];
        dp[0] = A[0];
        int res = 0;
        for(int i = 1; i < len; i++){
            dp[i] = Math.max(dp[i-1], A[i]);
        }
        dp[len-1] = A[len-1];
        for(int j = len-2; j >=0 ; j--){
            dp[j] = Math.min(dp[j],Math.max(dp[j+1], A[j]));
        }
        for(int i = 0; i < len; i++){
            if(dp[i] > A[i]){
                res += dp[i] - A[i];
            }
        }
        return res;
    }
}
