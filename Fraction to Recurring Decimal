/*
 Problem:    Fraction to Recurring Decimal
 Difficulty: Easy
 Source:     https://oj.leetcode.com/problems/fraction-to-recurring-decimal/
 Notes:
 Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.
 If the fractional part is repeating, enclose the repeating part in parentheses.
 For example,
 Given numerator = 1, denominator = 2, return "0.5".
 Given numerator = 2, denominator = 1, return "2".
 Given numerator = 2, denominator = 3, return "0.(6)".
 Solution: ...
 */
public class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        if (denominator == 0) {
                throw new IllegalArgumentException(" denominator can not be zero");
        }
        if(numerator == 0){return "0";}
        
        long num = (long) numerator;
        long den = (long) denominator;
        StringBuilder res = new StringBuilder();
        
        if((num < 0)^(den<0)){res.append('-');}
        
        num = Math.abs(num);
        den = Math.abs(den);
        
        res.append(num/den);
        num = num%den;
        
        if(num == 0){return res.toString();}
        res.append('.');
        
        HashMap<Long, Integer> map = new HashMap<Long, Integer>();
        while(num != 0 && !map.containsKey(num)){
            map.put(num, res.length());
            num *= 10;
            res.append(num/den);
            num = num%den;
        }
        
        if(map.containsKey(num)){
            res.insert(map.get(num),"(");
            res.append(")");
        }
        return res.toString();
    }
}
