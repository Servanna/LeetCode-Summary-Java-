/*
 Problem:    Swap Nodes in Pairs
 Difficulty: Medium
 Source:     https://oj.leetcode.com/problems/swap-nodes-in-pairs/
 Notes:
 Given a linked list, swap every two adjacent nodes and return its head.
 For example,
 Given 1->2->3->4, you should return the list as 2->1->4->3.
 Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
 Solution: 1. Iterative solution with constant space.
           2. Recursive solution with O(n) space (for practice).
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        ListNode pre = dummy;
        boolean flag = true;
        while(head != null){
            if(flag && head.next != null){
                ListNode n = head.next;
                head.next = n.next;
                n.next = pre.next;
                pre.next = n;
                pre = head;
            }else{
                head = head.next;
            }
            flag = !flag;
        }
        return dummy.next;
    }
}
public class Solution {
    public ListNode swapPairs(ListNode head) {
       if(head == null || head.next ==null){return head;}
       ListNode n = head.next;
       head.next = swapPairs(n.next);
       n.next = head;
       return n;
    }
}
